{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Human Interface System","text":""},{"location":"#overview","title":"Overview","text":"<p>This project implements a human interface system using microcontrollers (ESP32) to process multiple button inputs and generate an output waveform (PWM). The system communicates using I2C, SPI, or UART and provides user feedback through an LED/OLED display.</p>"},{"location":"#block-diagram","title":"Block Diagram","text":""},{"location":"#functionality","title":"Functionality","text":"<ol> <li>Button Module Input: Detects multiple button presses using a microcontroller.</li> <li>Microcontroller Processing: The ESP32/PIC reads button inputs and processes them accordingly.</li> <li>Communication: Data is transmitted using I2C protocols for external interaction.</li> <li>Output Waveform Generation: The system outputs a PWM signal.</li> <li>User Experience: The display module (SSD1306 OLED/LEDs) provides real-time feedback on button presses and output states.</li> </ol>"},{"location":"#api-link","title":"API Link","text":"<ul> <li>View API Page</li> <li>Download API PDF</li> <li>Download Firmware (.zip)</li> </ul>"},{"location":"#components-used","title":"Components Used","text":"Component Model Purpose Datasheet Cost Pros Cons Microcontroller ESP32-WROOM-32 Wi-Fi &amp; Bluetooth, multiple GPIOs, built-in DAC &amp; PWM Datasheet $5-8 Powerful, supports multiple interfaces, built-in DAC Higher power consumption Button Module TS02-66-70-BK-100-LCR-D Multiple inputs - $1-3 Simple, reliable Requires debounce circuit Resistors 10k\u03a9 Pull-up for button inputs - &lt;$1 Prevents floating states Required for stable operation Capacitors 0.1\u00b5F &amp; 10\u00b5F Decoupling &amp; noise reduction - &lt;$1 Improves stability Needs proper placement DAC (if needed) MCP4725 12-bit I2C DAC for waveform output Datasheet $3-5 Precise, I2C controlled Extra component needed Voltage Regulator AMS1117-3.3V For ESP32 power regulation Datasheet &lt;$1 Stable 3.3V output Needs heat dissipation Display (optional) SSD1306 OLED I2C-based for visualization Datasheet $5-10 Low power, clear display Small size Power Supply 5V DC Power Supply or Battery Provides power to circuit - Varies Portable, reliable Needs regulation"},{"location":"#schematics","title":"Schematics","text":"<p> Image: HUMAN INTERFACE SCHEMATICS </p>"},{"location":"#about","title":"About","text":""},{"location":"#microcontroller","title":"Microcontroller","text":"<ul> <li>ESP32-WROOM-32 (Wi-Fi &amp; Bluetooth, multiple GPIOs, built-in DAC &amp; PWM)</li> <li>PIC16F877A (If PIC is required, supports I2C, SPI, UART)</li> </ul>"},{"location":"#buttons","title":"Buttons","text":"<ul> <li>4x Momentary Push Buttons (e.g., Omron B3F-4055)</li> </ul>"},{"location":"#resistors-capacitors","title":"Resistors &amp; Capacitors","text":"<ul> <li>10k\u03a9 Resistors (Pull-up for button inputs)</li> <li>100\u03a9 Resistors (Series protection for output)</li> <li>0.1\u00b5F &amp; 10\u00b5F Capacitors (Decoupling &amp; noise reduction)</li> </ul>"},{"location":"#dac-if-needed","title":"DAC (if needed)","text":"<ul> <li>MCP4725 (12-bit I2C DAC for waveform output)</li> </ul>"},{"location":"#voltage-regulator","title":"Voltage Regulator","text":"<ul> <li>AMS1117-3.3V (For ESP32 power regulation)</li> </ul>"},{"location":"#oscillator-for-pic-if-required","title":"Oscillator (for PIC if required)","text":"<ul> <li>16MHz Crystal with 22pF Capacitors</li> </ul>"},{"location":"#display-optional","title":"Display (optional)","text":"<ul> <li>SSD1306 OLED (I2C-based) for waveform visualization)</li> </ul>"},{"location":"#power-supply","title":"Power Supply","text":"<ul> <li>5V DC Power Supply or Battery Module</li> </ul>"},{"location":"#connection","title":"Connection:","text":"<ul> <li> <p>name: ESP32-WROOM-32     type: Microcontroller     datasheet: https://www.espressif.com/sites/default/files/documentation/esp32-wroom-32_datasheet_en.pdf     pins:</p> <ul> <li>GPIO0: Boot Mode</li> <li>GPIO1: UART TX</li> <li>GPIO3: UART RX</li> <li>GPIO25: DAC Output A</li> <li>GPIO26: DAC Output B</li> <li>GPIO21: SDA (I2C for OLED)</li> <li>GPIO22: SCL (I2C for OLED)</li> </ul> </li> <li> <p>name: MCP4725     type: DAC     datasheet: https://cdn.sparkfun.com/datasheets/BreakoutBoards/MCP4725.pdf     pins:</p> <ul> <li>VCC: 3.3V</li> <li>GND: Ground</li> <li>SDA: GPIO21</li> <li>SCL: GPIO22</li> </ul> </li> <li> <p>name: AMS1117-3.3V     type: Voltage Regulator     datasheet: https://www.diodes.com/assets/Datasheets/AMS1117.pdf     pins:</p> <ul> <li>VIN: 5V</li> <li>VOUT: 3.3V</li> <li>GND: Ground</li> </ul> </li> </ul> <p>connections:   - from: GPIO25 (ESP32)     to: VOUT (DAC MCP4725)   - from: GPIO21 (ESP32)     to: SDA (MCP4725, OLED)   - from: GPIO22 (ESP32)     to: SCL (MCP4725, OLED) ```</p>"},{"location":"API/","title":"API \u2013 Human Interface Module (HIM)","text":"<p>Subsystem Role: The Human Interface Module (HIM) is responsible for handling user input via tactile buttons, providing system feedback through an OLED screen and analog waveform output, and communicating over UART with the upstream microcontroller (ESP32 for MQTT) and downstream subsystems (Motor, Microphone). Messages are formatted according to the class protocol and embedded between bytes 4\u201361 of the packet.</p> <p>Microcontroller: ESP32-WROOM-S3 (used in schematic)</p> <p>Inputs: - 3 tactile pushbuttons (TS04-86-50-BK series) for user control - Button input triggers messages like motor control, mode switching, or temp request which inturn, gives out a waveform like structure. </p> <p>Outputs: - OLED display via I2C (feedback, speed, temperature, etc.) - MCP4725 DAC via I2C (analog waveform output) - LED debug (message activity)</p>"},{"location":"API/#message-type-10-button-press-him-microcontroller-or-motor","title":"\u2705 Message Type 10 \u2013 Button Press (HIM \u2192 Microcontroller or Motor)","text":"<p>Button press events are detected on digital GPIO pins and trigger this message to notify the system of user interaction.</p> Byte # Variable Name Data Type Min Max Example 1 message_type <code>uint8_t</code> 10 10 10 2 button_id <code>uint8_t</code> 1 3 2 3 action_code <code>uint8_t</code> 0 3 1 <ul> <li><code>button_id</code>: Which physical button (mapped to GPIO)</li> <li><code>action_code</code>: 0 = Pressed, 1 = Held, 2 = Released, etc.</li> </ul>"},{"location":"API/#message-type-20-display-update-microcontroller-him","title":"\u2705 Message Type 20 \u2013 Display Update (Microcontroller \u2192 HIM)","text":"<p>Display instructions from the main system to OLED (e.g., speed, temp, status)</p> Byte # Variable Name Data Type Min Max Example 1 message_type <code>uint8_t</code> 20 20 20 2 display_code <code>uint8_t</code> 0 5 3 3 value <code>int16_t</code> -32768 32767 1200 <ul> <li><code>display_code</code>: 0 = Temp, 1 = Motor speed, 2 = Status</li> <li><code>value</code>: Signed number to display (e.g., temp = 2350 \u2192 23.5\u00b0C)</li> </ul>"},{"location":"API/#message-type-30-motor-command-him-motor-driver","title":"\u2705 Message Type 30 \u2013 Motor Command (HIM \u2192 Motor Driver)","text":"<p>When user requests a motor action via button press.</p> Byte # Variable Name Data Type Min Max Example 1 message_type <code>uint8_t</code> 30 30 30 2 motor_id <code>uint8_t</code> 1 2 1 3 set_speed <code>int8_t</code> -100 100 75 <ul> <li><code>set_speed</code>: Signed speed command (-100 = full reverse, 100 = full forward)</li> </ul>"},{"location":"API/#message-type-40-temperature-request-him-microcontroller","title":"\u2705 Message Type 40 \u2013 Temperature Request (HIM \u2192 Microcontroller)","text":"<p>User requests current temp for display or logic.</p> Byte # Variable Name Data Type Min Max Example 1 message_type <code>uint8_t</code> 40 40 40 2 sensor_id <code>uint8_t</code> 0 2 1"},{"location":"API/#message-type-41-temperature-reading-microcontroller-him","title":"\u2705 Message Type 41 \u2013 Temperature Reading (Microcontroller \u2192 HIM)","text":"<p>Microcontroller returns current temperature reading to HIM for display.</p> Byte # Variable Name Data Type Min Max Example 1 message_type <code>uint8_t</code> 41 41 41 2 sensor_id <code>uint8_t</code> 0 2 1 3\u20134 temp_val <code>int16_t</code> -32768 32767 2350 <ul> <li><code>temp_val</code>: 2350 \u2192 23.5\u00b0C (\u00d7100 scaling)</li> </ul>"},{"location":"API/#notes","title":"\u2705 Notes","text":"<ul> <li>All messages fit inside bytes 4\u201361 of the class message format.</li> <li>The prefix (0xA5), suffix (0x5A), sender, and receiver bytes are handled in the packet structure and not shown in these tables.</li> <li>All HIM messages are parsed using UART receive interrupt handlers and decoded based on <code>message_type</code>.</li> <li>Out-of-range values or incorrect lengths are ignored or NACKed.</li> <li>Valid messages trigger visual feedback via the onboard LED (<code>LED_DEBUG</code>).</li> </ul>"},{"location":"Block%20Diagram/","title":"Block Diagram","text":""},{"location":"Block%20Diagram/#block-diagram","title":"Block Diagram","text":""},{"location":"Block%20Diagram/#functionality","title":"Functionality","text":"<ol> <li>Button Module Input: Detects multiple button presses using a microcontroller.</li> <li>Microcontroller Processing: The ESP32/PIC reads button inputs and processes them accordingly.</li> <li>Communication: Data is transmitted using I2C protocols for external interaction.</li> <li>Output Waveform Generation: The system outputs a PWM signal.</li> <li>User Experience: The display module (SSD1306 OLED/LEDs) provides real-time feedback on button presses and output states.</li> </ol>"},{"location":"Component%20Selection/","title":"Component Selection for ESP32-WROOM-32 &amp; PIC16F877A","text":""},{"location":"Component%20Selection/#1-microcontroller-selection","title":"1. Microcontroller Selection","text":"Component Image Cost Datasheet Pros Cons ESP32-WROOM-32 \\(5-\\)8 Datasheet Built-in WiFi &amp; Bluetooth, Dual-core, DAC &amp; ADC, Low power Higher complexity, 3.3V logic level PIC16F877A \\(4-\\)6 Datasheet Reliable, Well-documented, Lower power No built-in WiFi/Bluetooth, Less computing power"},{"location":"Component%20Selection/#2-buttons","title":"2. Buttons","text":"Component Image Cost Datasheet Pros Cons Omron B3F-4055 $0.20 Datasheet High durability, Compact Mechanical wear over time"},{"location":"Component%20Selection/#3-resistors-capacitors","title":"3. Resistors &amp; Capacitors","text":"Component Image Cost Datasheet Pros Cons 10k\u03a9 Resistor $0.05 Datasheet Ideal for pull-up/pull-down Fixed value 100\u03a9 Resistor Same as above $0.05 Same as above Protection from overcurrent May limit signal strength 0.1\u00b5F Capacitor $0.10 Datasheet Decoupling, Noise reduction Can degrade over time 10\u00b5F Capacitor Same as above $0.15 Same as above Stable power delivery Bulkier than 0.1\u00b5F"},{"location":"Component%20Selection/#4-dac-digital-to-analog-converter","title":"4. DAC (Digital to Analog Converter)","text":"Component Image Cost Datasheet Pros Cons MCP4725 $2 Datasheet 12-bit accuracy, I2C interface Limited output voltage range"},{"location":"Component%20Selection/#5-voltage-regulator","title":"5. Voltage Regulator","text":"Component Image Cost Datasheet Pros Cons AMS1117-3.3V $0.50 Datasheet 3.3V stable output, Easy to use Low efficiency"},{"location":"Component%20Selection/#6-oscillator-for-pic-microcontroller","title":"6. Oscillator (For PIC Microcontroller)","text":"Component Image Cost Datasheet Pros Cons 16MHz Crystal $0.50 Datasheet Stable frequency, Needed for PIC External components required"},{"location":"Component%20Selection/#7-display-optional","title":"7. Display (Optional)","text":"Component Image Cost Datasheet Pros Cons SSD1306 OLED (I2C) $5 Datasheet Low power, High contrast Small screen size"},{"location":"Component%20Selection/#8-power-supply","title":"8. Power Supply","text":"Component Image Cost Datasheet Pros Cons 5V DC Adapter $5 - Reliable, Easy to find Needs wall socket Battery Module $10 - Portable Requires charging circuit"},{"location":"Schematics/","title":"Schematics","text":"<p>HUMAN INTERFACE SCHEMATICS   Image: HUMAN INTERFACE SCHEMATICS </p>"},{"location":"Schematics/#about","title":"About","text":""},{"location":"Schematics/#microcontroller","title":"Microcontroller","text":"<ul> <li>ESP32-WROOM-32 (Wi-Fi &amp; Bluetooth, multiple GPIOs, built-in DAC &amp; PWM)</li> <li>PIC16F877A (If PIC is required, supports I2C, SPI, UART)</li> </ul>"},{"location":"Schematics/#buttons","title":"Buttons","text":"<ul> <li>4x Momentary Push Buttons (e.g., Omron B3F-4055)</li> </ul>"},{"location":"Schematics/#resistors-capacitors","title":"Resistors &amp; Capacitors","text":"<ul> <li>10k\u03a9 Resistors (Pull-up for button inputs)</li> <li>100\u03a9 Resistors (Series protection for output)</li> <li>0.1\u00b5F &amp; 10\u00b5F Capacitors (Decoupling &amp; noise reduction)</li> </ul>"},{"location":"Schematics/#dac-if-needed","title":"DAC (if needed)","text":"<ul> <li>MCP4725 (12-bit I2C DAC for waveform output)</li> </ul>"},{"location":"Schematics/#voltage-regulator","title":"Voltage Regulator","text":"<ul> <li>AMS1117-3.3V (For ESP32 power regulation)</li> </ul>"},{"location":"Schematics/#oscillator-for-pic-if-required","title":"Oscillator (for PIC if required)","text":"<ul> <li>16MHz Crystal with 22pF Capacitors</li> </ul>"},{"location":"Schematics/#display-optional","title":"Display (optional)","text":"<ul> <li>SSD1306 OLED (I2C-based) for waveform visualization)</li> </ul>"},{"location":"Schematics/#power-supply","title":"Power Supply","text":"<ul> <li>5V DC Power Supply or Battery Module</li> </ul>"},{"location":"Schematics/#connection","title":"Connection:","text":"<ul> <li> <p>name: ESP32-WROOM-32     type: Microcontroller     datasheet: https://www.espressif.com/sites/default/files/documentation/esp32-wroom-32_datasheet_en.pdf     pins:</p> <ul> <li>GPIO0: Boot Mode</li> <li>GPIO1: UART TX</li> <li>GPIO3: UART RX</li> <li>GPIO25: DAC Output A</li> <li>GPIO26: DAC Output B</li> <li>GPIO21: SDA (I2C for OLED)</li> <li>GPIO22: SCL (I2C for OLED)</li> </ul> </li> <li> <p>name: PIC16F877A     type: Microcontroller     datasheet: http://ww1.microchip.com/downloads/en/DeviceDoc/30292c.pdf     pins:</p> <ul> <li>RA0-RA7: Digital Inputs</li> <li>RC3: SCL (I2C)</li> <li>RC4: SDA (I2C)</li> </ul> </li> <li> <p>name: MCP4725     type: DAC     datasheet: https://cdn.sparkfun.com/datasheets/BreakoutBoards/MCP4725.pdf     pins:</p> <ul> <li>VCC: 3.3V</li> <li>GND: Ground</li> <li>SDA: GPIO21</li> <li>SCL: GPIO22</li> </ul> </li> <li> <p>name: AMS1117-3.3V     type: Voltage Regulator     datasheet: https://www.diodes.com/assets/Datasheets/AMS1117.pdf     pins:</p> <ul> <li>VIN: 5V</li> <li>VOUT: 3.3V</li> <li>GND: Ground</li> </ul> </li> </ul> <p>connections:   - from: GPIO25 (ESP32)     to: VOUT (DAC MCP4725)   - from: GPIO21 (ESP32)     to: SDA (MCP4725, OLED)   - from: GPIO22 (ESP32)     to: SCL (MCP4725, OLED) ```</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}